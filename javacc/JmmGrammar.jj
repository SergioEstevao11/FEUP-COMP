PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;
TOKENS_ARE_NODES=false;



SPECIAL_TOKEN : <SINGLE_LINE_COMMENT:"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
                | < MULTI_LINE_COMMENT: "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/" >
;

SKIP : " " | "\t" | "\r" | "\n";

TOKEN :
		<IMPORT: "import">

    |   < INT: "int" >
    |   < BOOLEAN: "boolean" >
    |   < INTBRACKETS: "int[]">
    |   < STRING: "String" >

    |   < COMMA: "," >
    |   < DOT: ".">
    |   < COLON: ":" >
    |   < SEMICOLON: ";" >
    |   < OPEN_SQUARE_BRACKET: "[">
    |   < CLOSE_SQUARE_BRACKET: "]">
    |   < OPEN_CURVE_BRACKET: "(">
    |   < CLOSE_CURVE_BRACKET: ")">
    |   < OPEN_BRACKET: "{">
    |   < CLOSE_BRACKET: "}">

    |   < CLASS: "class">
    |   < PUBLIC: "public">
    |   < STATIC: "static">
    |   < VOID: "void">
    |   < MAIN: "main">
    |   < PRINTLN: "System.out.println" >
    |   < THIS: "this" >
    |   < EXTENDS: "extends" >
    |   < RETURN: "return" >
    |   < LENGTH: "length">
    |   < NEW: "new">

    |   < TRUE: "true">
    |   < FALSE: "false">
    |   < NOT: "!">
    |   < AND: "&&">
    |   < LESS: "<" >
    |   < PLUS: "+">
    |   < MINUS: "-">
    |   < TIMES: "*">
    |   < DIVIDE: "/">
    |   < EQUALS: "=">


    |   < IF: "if">
    |   < ELSE: "else">
    |   < WHILE: "while">

    |   < IDENTIFIER:  ("$" | <LETTER>) ("_" | "$" | <LETTER> | <DIGIT> | <UNDERSCORE>)*
                     | ("_" ("_" | "$" | <LETTER> | <DIGIT> | <UNDERSCORE>)+) >
    |   < LETTER: ["a"-"z","A"-"Z"] >
    |   < UNDERSCORE: "_" >
    |   < INTEGERLITERAL: (<DIGIT>)+ >
    |   < DIGIT: ["0"-"9"] >
    ;


Start : Import_Declaration Class_Declaration <EOF>
;



Import_Declaration :
    (<IMPORT> (<IDENTIFIER> ({jjtThis.put("name", lastConsumedToken.getImage());}) #Identifier)
    (<DOT> (<IDENTIFIER> ({jjtThis.put("name", lastConsumedToken.getImage());}) #Identifier))* <SEMICOLON>)*
;




Class_Declaration :
    <CLASS> (<IDENTIFIER> ({jjtThis.put("name", lastConsumedToken.getImage());}) #Identifier)
    (<EXTENDS> (<IDENTIFIER> ({jjtThis.put("name", lastConsumedToken.getImage());})) #Extend )* <OPEN_BRACKET> ( Var_Declaration )* (Method_Declaration)* <CLOSE_BRACKET>
;

Var_Declaration :
    (Type <IDENTIFIER> ({jjtThis.put("name", lastConsumedToken.getImage());}) #Identifier) (<EQUALS> Expression)? <SEMICOLON>
;

Type :
    (<INTBRACKETS> {jjtThis.put("type", lastConsumedToken.getImage());})    |
    (<IDENTIFIER> {jjtThis.put("type", lastConsumedToken.getImage());})     |
    (<INT>  {jjtThis.put("type", lastConsumedToken.getImage());})           |
    (<BOOLEAN> {jjtThis.put("type", lastConsumedToken.getImage());})        |
    (<STRING> {jjtThis.put("type", lastConsumedToken.getImage());})
;

Method_Declaration :
    <PUBLIC> (Common_Method_Header | Main_Method_Header) <OPEN_BRACKET> Method_Body <CLOSE_BRACKET>
;


Common_Method_Header :
    (Type <IDENTIFIER> ({jjtThis.put("name", lastConsumedToken.getImage());}) #Identifier) <OPEN_CURVE_BRACKET>
    ((Type <IDENTIFIER> ({jjtThis.put("name", lastConsumedToken.getImage());}) #Identifier)
    (<COMMA> (Type <IDENTIFIER> ({jjtThis.put("name", lastConsumedToken.getImage());}) #Identifier))* )* <CLOSE_CURVE_BRACKET>
;

Main_Method_Header :
    <STATIC> <VOID> <MAIN> <OPEN_CURVE_BRACKET> <STRING> <OPEN_SQUARE_BRACKET> <CLOSE_SQUARE_BRACKET>
    (<IDENTIFIER> ({jjtThis.put("name", lastConsumedToken.getImage());}) #Identifier) <CLOSE_CURVE_BRACKET>
;

Method_Body :
        (SCAN 2 Var_Declaration)* (Statement)* (Return)?
;

Return :
    <RETURN> Expression <SEMICOLON>
;

Statement #void:
    Compound_Statement |
    If_Statement |
    While_Statement |
    SCAN 2 Assignment |
    Expression_Statement
;

Compound_Statement #void: <OPEN_BRACKET> (Statement)* <CLOSE_BRACKET>
;

Expression_Statement : Expression <SEMICOLON>
;

If_Statement :
    (<IF> <OPEN_CURVE_BRACKET> Expression <CLOSE_CURVE_BRACKET> ) Statement #IfScope
    <ELSE> Statement  #ElseScope
;

While_Statement :
    (<WHILE> <OPEN_CURVE_BRACKET> Expression <CLOSE_CURVE_BRACKET> ({jjtThis.put("name", lastConsumedToken.getImage());}) ) Statement
;

Assignment #void:
    Var_Access <EQUALS> Expression #Assignment(2) <SEMICOLON>
;

Var_Access #void : SCAN 2 (<IDENTIFIER> ({jjtThis.put("name", lastConsumedToken.getImage());}) #Identifier) <OPEN_SQUARE_BRACKET> Expression <CLOSE_SQUARE_BRACKET>|
            (<IDENTIFIER> ({jjtThis.put("name", lastConsumedToken.getImage());}) #Identifier)
;

Expression #void: Less_Declaration ((<AND> Less_Declaration) #And(2) )*
;

Less_Declaration #void: Add_Sub_Declaration ((<LESS> Add_Sub_Declaration) #Less(2))*
;

Add_Sub_Declaration #void: Mult_Div_Declaration ( (<PLUS> Mult_Div_Declaration) #Plus(2) | (<MINUS> Mult_Div_Declaration) #Minus(2) )*
;

Mult_Div_Declaration #void: Not_Declaration ( (<TIMES> Not_Declaration ) #Times(2)  | (<DIVIDE> Not_Declaration) #Divide(2))*
;

Not_Declaration #void: Dot_Array_Declaration | <NOT> Not_Declaration #Not(1)
;

Dot_Array_Declaration #void: Key_Words ((<DOT> Dot_Declaration) #DotAccess(2) | (Array_Access #ArrayAccess(2)))*
;

Array_Access #void: <OPEN_SQUARE_BRACKET> Expression <CLOSE_SQUARE_BRACKET>
;

Dot_Declaration #void: <LENGTH> #Length | (<IDENTIFIER> ({jjtThis.put("name", lastConsumedToken.getImage());}) #Identifier) <OPEN_CURVE_BRACKET> (Expression (<COMMA> Expression)*)* <CLOSE_CURVE_BRACKET>
;

Key_Words #void:  <TRUE> #True |
            <FALSE> #False|
            <THIS> #This |
            New_Declaration |
            <OPEN_CURVE_BRACKET> Expression <CLOSE_CURVE_BRACKET> |
            (<INTEGERLITERAL> ({jjtThis.put("name", lastConsumedToken.getImage());}) #Number)|
            (<IDENTIFIER> ({jjtThis.put("name", lastConsumedToken.getImage());}) #Identifier)
;

New_Declaration : <NEW> (<INT> <OPEN_SQUARE_BRACKET> Expression <CLOSE_SQUARE_BRACKET> | (<IDENTIFIER> ({jjtThis.put("name", lastConsumedToken.getImage());}) #Identifier) <OPEN_CURVE_BRACKET> <CLOSE_CURVE_BRACKET>)
;          


INJECT BaseNode :
        import pt.up.fe.comp.jmm.ast.JmmNode;
        import pt.up.fe.comp.jmm.ast.AJmmNode;
        import pt.up.fe.specs.util.SpecsCollections;
        extends AJmmNode
{
    @Override
    public List<JmmNode> getChildren() {

        return SpecsCollections.cast(children(), JmmNode.class);
    }

    @Override
    public void add(JmmNode child, int index) {

        if (child instanceof Node) {

            addChild(index, (Node) child);
        } else {

            throw new RuntimeException("Node " + child + " is not a Node.");
        }

    }
}

