PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;

SPECIAL_TOKEN : <SINGLE_LINE_COMMENT:"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
                | < MULTI_LINE_COMMENT: "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/" >
;

SKIP : " " | "\t" | "\r" | "\n";

TOKEN :
		<IMPORT: "import">

    |   < INT: "int" >
    |   < BOOLEAN: "boolean" >
    |   < INTBRACKETS: "int[]">
    |   < STRING: "String" >

    |   < COMMA: "," >
    |   < DOT: ".">
    |   < COLON: ":" >
    |   < SEMICOLON: ";" >
    |   < OPEN_SQUARE_BRACKET: "[">
    |   < CLOSE_SQUARE_BRACKET: "]">
    |   < OPEN_CURVE_BRACKET: "(">
    |   < CLOSE_CURVE_BRACKET: ")">
    |   < OPEN_BRACKET: "{">
    |   < CLOSE_BRACKET: "}">

    |   < CLASS: "class">
    |   < PUBLIC: "public">
    |   < STATIC: "static">
    |   < VOID: "void">
    |   < MAIN: "main">
    |   < PRINTLN: "System.out.println" >
    |   < THIS: "this" >
    |   < EXTENDS: "extends" >
    |   < RETURN: "return" >
    |   < LENGTH: "length">
    |   < NEW: "new">

    |   < TRUE: "true">
    |   < FALSE: "false">
    |   < NOT: "!">
    |   < AND: "&&">
    |   < LESS: "<" >
    |   < PLUS: "+">
    |   < MINUS: "-">
    |   < TIMES: "*">
    |   < DIVIDE: "/">
    |   < EQUALS: "=">


    |   < IF: "if">
    |   < ELSE: "else">
    |   < WHILE: "while">

    |   < IDENTIFIER:  ("$" | <LETTER>) ("_" | "$" | <LETTER> | <DIGIT> | <UNDERSCORE>)*
                     | ("_" ("_" | "$" | <LETTER> | <DIGIT> | <UNDERSCORE>)+) >
    |   < LETTER: ["a"-"z","A"-"Z"] >
    |   < UNDERSCORE: "_" >
    |   < INTEGERLITERAL: (<DIGIT>)+ >
    |   < DIGIT: ["0"-"9"] >
    ;


Start : ImportDeclaration ClassDeclaration <EOF>
;

ImportDeclaration : (<IMPORT> <IDENTIFIER> ( <DOT> <IDENTIFIER> )* <SEMICOLON>)*
;


ClassDeclaration : <CLASS> <IDENTIFIER> ( <EXTENDS> <IDENTIFIER> )* <OPEN_BRACKET> ( VarDeclaration )* (MethodDeclaration)* <CLOSE_BRACKET>
;

VarDeclaration : Type <IDENTIFIER> (<EQUALS> AndDeclaration)? <SEMICOLON>
;

Type :  <INTBRACKETS> |
        <IDENTIFIER> |
        <INT>  |
        <BOOLEAN> |
        <STRING>
;

MethodDeclaration : <PUBLIC> (CommonMethodHeader | MainMethodHeader) <OPEN_BRACKET> MethodBody <CLOSE_BRACKET>
;


CommonMethodHeader : Type <IDENTIFIER> <OPEN_CURVE_BRACKET> (Type <IDENTIFIER> (<COMMA> Type <IDENTIFIER>)* )* <CLOSE_CURVE_BRACKET>
;

MainMethodHeader : <STATIC> <VOID> <MAIN> <OPEN_CURVE_BRACKET> <STRING> <OPEN_SQUARE_BRACKET> <CLOSE_SQUARE_BRACKET> <IDENTIFIER> <CLOSE_CURVE_BRACKET>
;

MethodBody : (SCAN 2 VarDeclaration)* (Statement)* (<RETURN> AndDeclaration <SEMICOLON>)?
;

Statement : <OPEN_BRACKET> (Statement)* <CLOSE_BRACKET> |
            IfStatement |
            WhileStatement |
            SCAN 2 Assignment |
            SCAN 2 AndDeclaration <SEMICOLON>

;

IfStatement : <IF> <OPEN_CURVE_BRACKET> AndDeclaration <CLOSE_CURVE_BRACKET> Statement <ELSE> Statement
;

WhileStatement : <WHILE> <OPEN_CURVE_BRACKET> AndDeclaration <CLOSE_CURVE_BRACKET> Statement
;

Assignment : VarAccess <EQUALS> AndDeclaration <SEMICOLON>
;

VarAccess : SCAN 2 <IDENTIFIER> <OPEN_SQUARE_BRACKET> AndDeclaration <CLOSE_SQUARE_BRACKET>|
            SCAN 2 <IDENTIFIER>
;

AndDeclaration : LessDeclaration (<AND> LessDeclaration)*
;

LessDeclaration : AddSubDeclaration (<LESS> AddSubDeclaration)*
;

AddSubDeclaration : MultDivDeclaration (<PLUS> MultDivDeclaration | <MINUS> MultDivDeclaration)*
;

MultDivDeclaration : NotDeclaration (<TIMES> NotDeclaration | <DIVIDE> NotDeclaration)*
;

NotDeclaration : DotArrayDeclaration | <NOT> NotDeclaration
;

DotArrayDeclaration : KeyWords (<DOT> DotDeclaration | <OPEN_SQUARE_BRACKET> AndDeclaration <CLOSE_SQUARE_BRACKET>)*
;


DotDeclaration : <LENGTH> | <IDENTIFIER> <OPEN_CURVE_BRACKET> (AndDeclaration (<COMMA> AndDeclaration)*)* <CLOSE_CURVE_BRACKET>
;

KeyWords :  <TRUE>  | 
            <FALSE> | 
            <THIS>  |
            NewDeclaration |
            <OPEN_CURVE_BRACKET> AndDeclaration <CLOSE_CURVE_BRACKET> |
            <INTEGERLITERAL> |
            <IDENTIFIER>
;

NewDeclaration : <NEW> (<INT> <OPEN_SQUARE_BRACKET> AndDeclaration <CLOSE_SQUARE_BRACKET> | <IDENTIFIER> <OPEN_CURVE_BRACKET> <CLOSE_CURVE_BRACKET>)
;          

