PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;

SPECIAL_TOKEN : <SINGLE_LINE_COMMENT:"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
                | < MULTI_LINE_COMMENT: "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/" >
;

SKIP : " " | "\t" | "\r" | "\n";

TOKEN :
		<IMPORT: "import">

    |   < INT: "int" >
    |   < BOOLEAN: "boolean" >
    |   < INTBRACKETS: "int[]">
    |   < STRING: "String" >

    |   < COMMA: "," >
    |   < DOT: ".">
    |   < COLON: ":" >
    |   < SEMICOLON: ";" >
    |   < OPEN_SQUARE_BRACKET: "[">
    |   < CLOSE_SQUARE_BRACKET: "]">
    |   < OPEN_CURVE_BRACKET: "(">
    |   < CLOSE_CURVE_BRACKET: ")">
    |   < OPEN_BRACKET: "{">
    |   < CLOSE_BRACKET: "}">

    |   < CLASS: "class">
    |   < PUBLIC: "public">
    |   < STATIC: "static">
    |   < VOID: "void">
    |   < MAIN: "main">
    |   < PRINTLN: "System.out.println" >
    |   < THIS: "this" >
    |   < EXTENDS: "extends" >
    |   < RETURN: "return" >
    |   < LENGTH: "length">
    |   < NEW: "new">

    |   < TRUE: "true">
    |   < FALSE: "false">
    |   < NOT: "!">
    |   < AND: "&&">
    |   < LESS: "<" >
    |   < PLUS: "+">
    |   < MINUS: "-">
    |   < TIMES: "*">
    |   < DIVIDE: "/">
    |   < EQUALS: "=">


    |   < IF: "if">
    |   < ELSE: "else">
    |   < WHILE: "while">

    |   < IDENTIFIER:  ("$" | <LETTER>) ("_" | "$" | <LETTER> | <DIGIT> | <UNDERSCORE>)*
                     | ("_" ("_" | "$" | <LETTER> | <DIGIT> | <UNDERSCORE>)+) >
    |   < LETTER: ["a"-"z","A"-"Z"] >
    |   < UNDERSCORE: "_" >
    |   < INTEGERLITERAL: (<DIGIT>)+ >
    |   < DIGIT: ["0"-"9"] >
    ;


Start : ImportDeclaration ClassDeclaration <EOF>
;

ImportDeclaration : (<IMPORT> <IDENTIFIER> ( <DOT> <IDENTIFIER> )* <SEMICOLON>)*
;


ClassDeclaration : <CLASS> <IDENTIFIER> ( <EXTENDS> <IDENTIFIER> )* <OPEN_BRACKET> ( VarDeclaration )* (MethodDeclaration)* <CLOSE_BRACKET>
;

VarDeclaration : Type <IDENTIFIER> (<EQUALS> Expression)? <SEMICOLON>
;

Type :  <INTBRACKETS> |
        <IDENTIFIER> |
        <INT>  |
        <BOOLEAN> |
        <STRING>
;

MethodDeclaration : <PUBLIC> (CommonMethodHeader | MainMethodHeader) <OPEN_BRACKET> MethodBody <CLOSE_BRACKET>
;


CommonMethodHeader : Type <IDENTIFIER> <OPEN_CURVE_BRACKET> (Type <IDENTIFIER> (<COMMA> Type <IDENTIFIER>)* )* <CLOSE_CURVE_BRACKET>
;

MainMethodHeader : <STATIC> <VOID> <MAIN> <OPEN_CURVE_BRACKET> <STRING> <OPEN_SQUARE_BRACKET> <CLOSE_SQUARE_BRACKET> <IDENTIFIER> <CLOSE_CURVE_BRACKET>
;

MethodBody : (SCAN 2 VarDeclaration)* (Statement)* (<RETURN> Expression <SEMICOLON>)?
;

Statement : <OPEN_BRACKET> (Statement)* <CLOSE_BRACKET> |
            IfStatement |
            WhileStatement |
            SCAN 2 Assignment |
            SCAN 2 Expression <SEMICOLON>
;

IfStatement : <IF> <OPEN_CURVE_BRACKET> Expression <CLOSE_CURVE_BRACKET> Statement <ELSE> Statement
;

WhileStatement : <WHILE> <OPEN_CURVE_BRACKET> Expression <CLOSE_CURVE_BRACKET> Statement
;

Assignment : VarAccess <EQUALS> Expression <SEMICOLON>
;

VarAccess : SCAN 2 <IDENTIFIER> <OPEN_SQUARE_BRACKET> Expression <CLOSE_SQUARE_BRACKET>|
            SCAN 2 <IDENTIFIER>
;

Expression : LessDeclaration (<AND> LessDeclaration)*
;

LessDeclaration : AddSubDeclaration (<LESS> AddSubDeclaration)*
;

AddSubDeclaration : MultDivDeclaration (<PLUS> MultDivDeclaration | <MINUS> MultDivDeclaration)*
;

MultDivDeclaration : NotDeclaration (<TIMES> NotDeclaration | <DIVIDE> NotDeclaration)*
;

NotDeclaration : DotArrayDeclaration | <NOT> NotDeclaration
;

DotArrayDeclaration : KeyWords (<DOT> DotDeclaration | <OPEN_SQUARE_BRACKET> Expression <CLOSE_SQUARE_BRACKET>)*
;


DotDeclaration : <LENGTH> | <IDENTIFIER> <OPEN_CURVE_BRACKET> (Expression (<COMMA> Expression)*)* <CLOSE_CURVE_BRACKET>
;

KeyWords :  <TRUE>  | 
            <FALSE> | 
            <THIS>  |
            NewDeclaration |
            <OPEN_CURVE_BRACKET> Expression <CLOSE_CURVE_BRACKET> |
            <INTEGERLITERAL> |
            <IDENTIFIER>
;

NewDeclaration : <NEW> (<INT> <OPEN_SQUARE_BRACKET> Expression <CLOSE_SQUARE_BRACKET> | <IDENTIFIER> <OPEN_CURVE_BRACKET> <CLOSE_CURVE_BRACKET>)
;          




SimpleNode Program():{}{
    ImportDeclaration() ClassDeclaration() <EOF> { return jjtThis; }
}

void ImportDeclaration() #Import:{Token t1, t2;}{
	(<IMPORT> t1 = <IDENTIFIER> {jjtThis.put("HEAD", t1.image)}; #Identifier(true) ( <DOT> t2 = <IDENTIFIER> {  jjtThis.put("NEXT", t2.image); } #Identifier)* <SEMICOLON>)*
}

void ClassDeclaration():{Token t1, t2;}{
	<Class> t1 = <IDENTIFIER> {jjtThis.put("CHILD", t1.image);} #Identifier (<EXTENDS> t2 = <IDENTIFIER> {jjtThis.put("PARENT", t2.image);} #Extends)* <OPEN_BRACKET> ( VarDeclaration() )* (MethodDeclaration())* <CLOSE_BRACKET>                            
}

void VarDeclaration():{Token t1;}{
	Type() t1 = <IDENTIFIER> {jjtThis.put("NAME", t1.image);} #Identifier (<EQUALS> Expression)? <SEMICOLON>
}

void Type():{Token t1;}{
	<INTBRACKETS> | 
	t1 = <IDENTIFIER> {jjtThis.put("NAME", t1.image);} |
	<INT> |
        <BOOLEAN> |
        <STRING>
	
}

void MethodDeclaration():{}{
	<PUBLIC> (CommonMethodHeader() | MainMethodHeader()) <OPEN_BRACKET> MethodBody() <CLOSE_BRACKET>
}

void CommonMethodHeader():{Token t1, t2, t3;}{
	Type() t1 = <IDENTIFIER> {jjtThis.put("METHOD", t1.image);} #Identifier <OPEN_CURVE_BRACKET> (Type() t2 = <IDENTIFIER> {jjtThis.put("METHOD", t2.image);} #Identifier (<COMMA> Type() t3 = <IDENTIFIER> {jjtThis.put("METHOD", t3.image);} #Identifier)*)* <CLOSE_CURVE_BRACKET>
}

void MainMethodHeader():{Token t1}{
	<STATIC> <VOID> <MAIN> <OPEN_CURVE_BRACKET> <STRING> <OPEN_SQUARE_BRACKET> <CLOSE_SQUARE_BRACKET> t1 = <IDENTIFIER> {jjtThis.put("METHOD", t1.image);} #Identifier <CLOSE_CURVE_BRACKET>
}

void MethodBody():{}{
	(SCAN 2 VarDeclaration())* (Statement())* (<RETURN> Expression() <SEMICOLON>)?
}

void Statement() #void:{}{
	<OPEN_BRACKET> (Statement())* <CLOSE_BRACKET> |
        IfStatement() |
        WhileStatement() |
	SCAN 2 Assignment() |
        SCAN 2 Expression() <SEMICOLON>
        
}

void IfStatement() #IfStatement:{}{
	<IF> <OPEN_CURVE_BRACKET> Expression() <CLOSE_CURVE_BRACKET> Statement() #If <ELSE> Statement() #Else
}

void WhileStatement() #WhileStatement:{}{
	<WHILE> <OPEN_CURVE_BRACKET> Expression() <CLOSE_CURVE_BRACKET> Statement() #While
}

void Assignment() #void:{}{
	VarAccess() <EQUALS> Expression() <SEMICOLON>     
}

void VarAccess() #void:{Token t1;}{
	SCAN 2  t1 = <IDENTIFIER> {jjtThis.put("VAR", t1.image); } #Identifier <OPEN_SQUARE_BRACKET> Expression() <CLOSE_SQUARE_BRACKET> |
        SCAN 2 t1 = <IDENTIFIER> {jjtThis.put("VAR", t1.image); } #Identifier
}

void Expression() #void:{}{
	LessDeclaration() (<AND> LessDeclaration() #And(2))*
}

void LessDeclaration() #void:{}{
	AddSubDeclaration() (<LESS> AddSubDeclaration() #Less(2))*
}

void AddSubDeclaration() #void:{}{
	MultDivDeclaration() (<PLUS> MultDivDeclaration() #Add(2)| <MINUS> MultDivDeclaration() #Sub(2))*
}

void MultDivDeclaration() #void:{}{
	NotDeclaration() (<TIMES> NotDeclaration() #Mult(2)| <DIVIDE> NotDeclaration() #Div(2))*
}

void NotDeclaration() #void:{}{
	DotArrayDeclaration() | (<NOT> NotDeclaration() #Not(1))
}

void DotArrayDeclaration() #void:{}{
	KeyWords() (<DOT> DotDeclaration() #Dot(2)| <OPEN_SQUARE_BRACKET> Expression() <CLOSE_SQUARE_BRACKET> #Array(2))*
}

void DotDeclaration() #void:{Token t1;}{
	<LENGTH> #Length| t1 = <IDENTIFIER> {jjtThis.put("NAME", t1.image); } #Identifier <OPEN_CURVE_BRACKET> (Expression() (<COMMA> Expression())*)*  <CLOSE_CURVE_BRACKET>
}

void KeyWords():{Token t1;}{
	<TRUE> #True | 
        <FALSE> #False| 
        <THIS>  #This|
        NewDeclaration() |
        <OPEN_CURVE_BRACKET> Expression() <CLOSE_CURVE_BRACKET> |
        t1 = <IDENTIFIER> {jjtThis.put("NAME", t1.image); } #Identifier |
        t1 = <INTEGERLITERAL> {jjtThis.put("NUMBER", t1.image); } #Number
}

void NewDeclaration() #void:{Token t1;}{
	<NEW> (<INT> <OPEN_SQUARE_BRACKET> Expression() <CLOSE_SQUARE_BRACKET> | t1 = <IDENTIFIER> {jjtThis.put("OBJECT", t1.image); } #Identifier | <OPEN_CURVE_BRACKET> <CLOSE_CURVE_BRACKET>)
}

