PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;

SKIP : " " | "\t" | "\r" | "\n";

TOKEN :
		<IMPORT: "import">

    |   < INT: "int" >
    |   < BOOLEAN: "boolean" >
    |   < INTBRACKETS: "int[]">
    |   < STRING: "String" >

    |   < COMMA: "," >
    |   < DOT: ".">
    |   < COLON: ":" >
    |   < SEMICOLON: ";" >
    |   < OPENSQUAREBRACKET: "[">
    |   < CLOSESQUAREBRACKET: "]">
    |   < OPEN_PAREN_CURVE: "(">
    |   < CLOSE_PAREN_CURVE: ")">
    |   < OPENBRACKET: "{">
    |   < CLOSEBRACKET: "}">

    |   < CLASS: "class">
    |   < PUBLIC: "public">
    |   < STATIC: "static">
    |   < VOID: "void">
    |   < MAIN: "main">
    |   < PRINTLN: "System.out.println" >
    |   < THIS: "this" >
    |   < EXTENDS: "extends" >
    |   < RETURN: "return" >
    |   < LENGTH: "length">
    |   < NEW: "new">

    |   < TRUE: "true">
    |   < FALSE: "false">
    |   < NOT: "!">
    |   < AND: "&&">
    |   < LESS: "<" >
    |   < PLUS: "+">
    |   < MINUS: "-">
    |   < TIMES: "*">
    |   < DIVIDE: "/">
    |   < EQUALS: "=">


    |   < IF: "if">
    |   < ELSE: "else">
    |   < WHILE: "while">

    |   < IDENTIFIER:  ("$" | <LETTER>) ("_" | "$" | <LETTER> | <DIGIT> | <UNDERSCORE>)*
                     | ("_" ("_" | "$" | <LETTER> | <DIGIT> | <UNDERSCORE>)+) >
    |   < LETTER: ["a"-"z","A"-"Z"] >
    |   < UNDERSCORE: "_" >
    |   < INTEGERLITERAL: (<DIGIT>)+ >
    |   < DIGIT: ["0"-"9"] >
    ;


Program : ImportDeclaration ClassDeclaration <EOF>
;

ImportDeclaration : (<IMPORT> <IDENTIFIER> ( <DOT> <IDENTIFIER> )* <SEMICOLON>)
;

ClassDeclaration : <CLASS> <IDENTIFIER> [ <EXTENDS> <IDENTIFIER> ] <OPENBRACKET> ( VarDeclaration )* (MethodDeclaration)* <CLOSEBRACKET> 
;

VarDeclaration : Type <IDENTIFIER> <SEMICOLON>
;

Type :  <INTBRACKETS> | 
        <INT> <OPENSQUAREBRACKET> <IDENTIFIER> <CLOSESQUAREBRACKET |
        <BOOLEAN> |
        <STRING>
;

MethodDeclaration : <PUBLIC> (CommonMethodHeader | MainMethodHeader) <OPENBRACKET> MethodBody <CLOSEBRACKET>
;

CommonMethodHeader : Type <IDENTIFIER> <OPEN_PAREN_CURVE> [ Type <IDENTIFIER> (<COMMA> Type <IDENTIFIER>)* ] <CLOSE_PAREN_CURVE>
;

MainMethodHeader : <STATIC> <VOID> <MAIN> <OPEN_PAREN_CURVE> <STRING> <OPENSQUAREBRACKET> <CLOSESQUAREBRACKET> <IDENTIFIER> <CLOSE_PAREN_CURVE>
;

MethodBody : (VarDeclaration | Statement)*
;

Statement : 




LessDeclaration : AddSubDeclaration (<LESS> AddSubDeclaration )
;
AddSubDeclaration : MultDivDeclaration (<PLUS> MultDivDeclaration | <MINUS> MultDivDeclaration)
;
MultDivDeclaration : NotDeclaration (<Times> NotDeclaration | <DIVIDE> NotDeclaration)
;
NotDeclaration : (<NOT> NotDeclaration) | DotArrayDeclaration)
;